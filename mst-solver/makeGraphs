#!/usr/bin/env python


from nodex import Nodex
from nodex import Graph
import names

edgeWeight = 16.0
nextNodeID = 0.0
finalHomeNode = 0

graph = Graph("gen_graph")

from optparse import OptionParser

usage = "usage: %prog [options] arg"
parser = OptionParser(usage)
parser.add_option("-f", "--file", dest="filename", help="read data from FILENAME")
parser.add_option("-n", "--nodes", dest="numNodes", help="number of nodes in graph")
parser.add_option("-s", "--homes", dest="numHomes", help="number of homes")

(options, args) = parser.parse_args()


for i in range(int(options.numNodes)):
    if graph.nodeCount >= int(options.numNodes):
        break
    parentNode = Nodex(names.get_first_name(), nextNodeID)
    parentNode.routeNode = True
    if i != 0:
        lastNode.addNegihbor(parentNode)
        parentNode.addNegihbor(lastNode)
    lastNode = parentNode
    nextNodeID+=1
    graph.addNode(parentNode)
    if graph.nodeCount >= int(options.numNodes):
        break
    if i % 5 == 0:
        parentNode.dropNode = True
        for j in range(4):
            node = Nodex(names.get_first_name(), nextNodeID)
            if graph.homeCount < int(options.numHomes):
                node.homeNode = True
                graph.homeCount+=1
                if graph.homeCount == int(options.numHomes):
                    graph.finalHomeNode = node.ID
            nextNodeID += 1
            graph.addNode(node)
            parentNode.addNegihbor(node)
            node.addNegihbor(parentNode)
            if graph.nodeCount >= int(options.numNodes):
                break
    elif i % 5 == 1:
        current = parentNode
        for j in range(3):
            node = Nodex(names.get_first_name(), nextNodeID)
            if graph.homeCount < int(options.numHomes):
                node.homeNode = True
                graph.homeCount+=1
                if graph.homeCount == int(options.numHomes):
                    graph.finalHomeNode = node.ID
            node.routeNode = True
            nextNodeID += 1
            graph.addNode(node)
            current.addNegihbor(node)
            node.addNegihbor(current)
            current = node
            if graph.nodeCount >= int(options.numNodes):
                break
    elif i % 5 == 2:
        current = parentNode
        for j in range(2):
            node = Nodex(names.get_first_name(), nextNodeID)
            if graph.homeCount < int(options.numHomes):
                node.homeNode = True
                graph.homeCount+=1
                if graph.homeCount == int(options.numHomes):
                    graph.finalHomeNode = node.ID
            if j == 0:
                node.routeNode = True
                node.dropNode = True
            nextNodeID += 1
            graph.addNode(node)
            current.addNegihbor(node)
            node.addNegihbor(current)
            current = node
            if graph.nodeCount >= int(options.numNodes):
                break
    elif i % 5 == 3:
        parentNode.dropNode = True
        node = Nodex(names.get_first_name(), nextNodeID)
        if graph.homeCount < int(options.numHomes):
            node.homeNode = True
            graph.homeCount+=1
            if graph.homeCount == int(options.numHomes):
                graph.finalHomeNode = node.ID
        nextNodeID += 1
        graph.addNode(node)
        parentNode.addNegihbor(node)
        node.addNegihbor(parentNode)
    else:
        current = parentNode
        for j in range(2):
            node = Nodex(names.get_first_name(), nextNodeID)
            if j == 0:
                node.routeNode = True
                node.dropNode = True
            nextNodeID += 1
            graph.addNode(node)
            current.addNegihbor(node)
            node.addNegihbor(current)
            current = node
            if graph.nodeCount >= int(options.numNodes):
                break
        for j in range(2):
            node = Nodex(names.get_first_name(), nextNodeID)
            if graph.homeCount < int(options.numHomes):
                node.homeNode = True
                graph.homeCount+=1
                if graph.homeCount == int(options.numHomes):
                    graph.finalHomeNode = node.ID
            nextNodeID += 1
            graph.addNode(node)
            current.addNegihbor(node)
            node.addNegihbor(current)
            if graph.nodeCount >= int(options.numNodes):
                break
graph.printGraph()
graph.writeInputFile("dumy")